[1.14.1.a]
logic = 'PropositionalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q, r'
premise1 = 'p âŠƒ q'
premise2 = 'r âŠƒ q'
conclusion = '(p âˆ¨ r) âŠƒ q'

[1.14.1.b]
logic = 'PropositionalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q, r'
premise1 = 'p âŠƒ (q âˆ§ r)'
premise2 = 'Â¬r'
conclusion = 'Â¬p'

[1.14.1.c]
logic = 'PropositionalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = '((p âŠƒ q) âŠƒ q) âŠƒ q'

[1.14.1.d]
logic = 'PropositionalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = '((p âŠƒ q) âˆ§ (Â¬p âŠƒ q)) âŠƒ Â¬p'

[1.14.1.e]
logic = 'PropositionalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q, r'
premise = 'p â‰¡ (q â‰¡ r)'
conclusion = '(p â‰¡ q) â‰¡ r'

[1.14.1.f]
logic = 'PropositionalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q, r'
premise = 'Â¬(p âŠƒ q) âˆ§ Â¬(p âŠƒ r)'
conclusion = 'Â¬q âˆ¨ Â¬r'

[1.14.1.g]
logic = 'PropositionalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p, q, r, s'
premise1 = 'p âˆ§ (Â¬r âˆ¨ s)'
premise2 = 'Â¬(q âŠƒ s)'
conclusion = 'r'

[1.14.1.h]
logic = 'PropositionalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q, r'
conclusion = '(p âŠƒ (q âŠƒ r)) âŠƒ (q âŠƒ (p âŠƒ r))'

[1.14.1.i]
logic = 'PropositionalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p, q, r, s'
premise1 = 'Â¬(p âˆ§ Â¬q) âˆ¨ r'
premise2 = 'p âŠƒ (r â‰¡ s)'
conclusion = 'p â‰¡ q'

[1.14.1.j]
logic = 'PropositionalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q, r, s'
premise1 = 'p â‰¡ Â¬Â¬q'
premise2 = 'Â¬q âŠƒ (r âˆ§ Â¬s)'
premise3 = 's âŠƒ (p âˆ¨ q)'
conclusion = '(s âˆ§ q) âŠƒ p'

[2.12.2.a]
logic = 'KModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B'
conclusion = '(â–¡A âˆ§ â–¡B) âŠƒ â–¡(A âˆ§ B)'

[2.12.2.b]
logic = 'KModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B'
conclusion = '(â–¡A âˆ¨ â–¡B) âŠƒ â–¡(A âˆ¨ B)'

[2.12.2.c]
logic = 'KModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A'
conclusion = 'â–¡ A â‰¡ Â¬â—‡Â¬A'

[2.12.2.d]
logic = 'KModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A'
conclusion = 'â—‡ A â‰¡ Â¬â–¡Â¬A'

[2.12.2.e]
logic = 'KModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B'
conclusion = 'â—‡(A âˆ§ B) âŠƒ (â—‡A âˆ§ â—‡B)'

[2.12.2.f]
logic = 'KModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B'
conclusion = 'â—‡(A âˆ¨ B) âŠƒ (â—‡A âˆ¨ â—‡B)'

[2.12.2.g]
logic = 'KModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B'
premise = 'â–¡(A âŠƒ B)'
conclusion = 'â—‡A âŠƒ â—‡B'

[2.12.2.h]
logic = 'KModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B'
premise1 = 'â–¡A'
premise2 = 'â—‡B'
conclusion = 'â—‡(A âˆ§ B)'

[2.12.2.i]
logic = 'KModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A'
conclusion = 'â–¡A â‰¡ â–¡(Â¬A âŠƒ A)'

[2.12.2.j]
logic = 'KModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B'
conclusion = 'â–¡A âŠƒ â–¡(B âŠƒ A)'

[2.12.2.k]
logic = 'KModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B'
conclusion = 'Â¬â—‡B âŠƒ â–¡(B âŠƒ A)'

[2.12.2.l]
logic = 'KModalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = 'â–¡(p âˆ¨ q) âŠƒ (â–¡p âˆ¨ â–¡q)'

[2.12.2.m]
logic = 'KModalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p, q'
premise1 = 'â–¡p'
premise2 = 'â–¡Â¬q'
conclusion = 'â–¡(p âŠƒ q)'

[2.12.2.n]
logic = 'KModalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p, q'
premise1 = 'â—‡p'
premise2 = 'â—‡q'
conclusion = 'â—‡(p âˆ§ q)'

[2.12.2.o]
logic = 'KModalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p'
conclusion = 'â–¡p âŠƒ p'

[2.12.2.p]
logic = 'KModalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p'
conclusion = 'â–¡p âŠƒ â—‡p'

[2.12.2.q]
logic = 'KModalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p'
premise = 'p'
conclusion = 'â–¡p'

[2.12.2.r]
logic = 'KModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p'
conclusion = 'â–¡p âŠƒ â–¡â–¡p'

[2.12.2.s]
logic = 'KModalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p'
conclusion = 'â–¡p âŠƒ â—‡â—‡p'

[2.12.2.t]
logic = 'KModalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p'
conclusion = 'p âŠƒ â–¡â—‡p'

[2.12.2.u]
logic = 'KModalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p'
conclusion = 'â—‡p âŠƒ â–¡â—‡p'

[2.12.2.v]
logic = 'KModalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p'
conclusion = 'â—‡(p âˆ¨ Â¬p)'

[3.10.3.a]
logic = 'TModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B, C'
conclusion = '(â–¡(A âŠƒ B) âˆ§ â–¡(B âŠƒ C)) âŠƒ (A âŠƒ C)'

[3.10.3.b]
logic = 'TModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B, C'
conclusion = '(â–¡(A âŠƒ B) âˆ§ â—‡(A âˆ§ C)) âŠƒ â—‡(B âˆ§ C)'

[3.10.3.c]
logic = 'TModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B'
conclusion = '(â–¡A âˆ§ â–¡B) âŠƒ (A â‰¡ B)'

[3.10.3.d]
logic = 'TModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B'
conclusion = 'â—‡(A âŠƒ B) â‰¡ (â–¡A âŠƒ â—‡B)'

[3.10.3.e]
logic = 'TModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B'
conclusion = '(â—‡Â¬A âˆ¨ â—‡Â¬B) âˆ¨ â—‡(A âˆ¨ B)'

[3.10.3.f]
logic = 'TModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B, C'
conclusion = 'â—‡(A âŠƒ (B âˆ§ C)) âŠƒ ((â–¡A âŠƒ â—‡B) âˆ§ (â–¡A âŠƒ â—‡C))'

[3.10.4.a]
logic = 'S4ModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B'
conclusion = '(â–¡A âˆ¨ â–¡B) â‰¡ â–¡(â–¡A âˆ¨ â–¡B)'

[3.10.4.b]
logic = 'S4ModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B, C'
conclusion = 'â–¡(â–¡(A â‰¡ B) âŠƒ C) âŠƒ (â–¡(A â‰¡ B) âŠƒ â–¡C)'

[3.10.5.a]
logic = 'S5ModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A'
conclusion = 'â—‡A âŠƒ â—‡â—‡A'

[3.10.5.b]
logic = 'S5ModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A'
conclusion = 'â—‡A âŠƒ â–¡â—‡A'

[3.10.5.c]
logic = 'S5ModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B'
conclusion = 'â–¡(â–¡A âŠƒ â–¡B) âˆ¨ â–¡(â–¡B âŠƒ â–¡A)'

[3.10.5.d]
logic = 'S5ModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'A, B'
conclusion = 'â–¡(â—‡A âŠƒ B) â‰¡ â–¡(A âŠƒ â–¡B)'

[3.10.6.a]
logic = 'S4ModalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p'
conclusion = 'â—‡â–¡p âŠƒ â–¡â—‡p'

[3.10.6.b]
logic = 'S4ModalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = 'â–¡(â–¡p âŠƒ q) âˆ¨ â–¡(â–¡q âŠƒ p)'

[3.10.6.c]
logic = 'S4ModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = 'â–¡(p â‰¡ q) âŠƒ â–¡(â–¡p â‰¡ â–¡q)'

[3.10.6.d]
logic = 'S4ModalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = 'â—‡â–¡p â‰¡ â–¡â—‡p'

[3.10.10.a]
logic = 'KTemporalModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = 'ðŸ„µ(p âŠƒ q) âŠƒ (ðŸ„µp âŠƒ ðŸ„µq)'

[3.10.10.b]
logic = 'KTemporalModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = 'â’»p â‰¡ Â¬ðŸ„µÂ¬p'

[3.10.10.c]
logic = 'KTemporalModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = 'p âŠƒ ðŸ„µâ“…p'

[3.10.10.d]
logic = 'KTemporalModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q'
premise = 'ðŸ„µp âŠƒ ðŸ„µðŸ„µp'
conclusion = 'ðŸ„¿p âŠƒ ðŸ„¿ðŸ„¿p'

[3.10.10.e]
logic = 'KTemporalModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = 'ðŸ„µ(p âŠƒ q) âŠƒ (â’»p âŠƒ â’»q)'

[3.10.10.f]
logic = 'KTemporalModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q'
premise = 'â’»â’»p âŠƒ â’»p'
conclusion = 'â“…â“…p âŠƒ â“…p'

[3.10.10.g]
logic = 'KTemporalModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = '(ðŸ„¿p âˆ¨ ðŸ„¿q) âŠƒ ðŸ„¿(p âˆ¨ q)'

[3.10.10.h]
logic = 'KTemporalModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = 'â“…(p âˆ§ q) âŠƒ (â“…p âˆ§ â“…q)'

[3.10.10.i]
logic = 'KTemporalModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = '(â’»p âˆ§ â’»q) âŠƒ ((â’»(p âˆ§ â’»q)) âˆ¨ â’»(p âˆ§ q) âˆ¨ (â’»(â’»p âˆ§ q)))'

[3.10.10.j]
logic = 'KTemporalModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = '(â“…p âˆ§ â“…q) âŠƒ ((â“…(p âˆ§ â“…q)) âˆ¨ â“…(p âˆ§ q) âˆ¨ (â“…(â“…p âˆ§ q)))'

[3.10.10.k]
logic = 'KTemporalModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = 'ðŸ„¿(p âˆ§ q) â‰¡ (ðŸ„¿p âˆ§ ðŸ„¿q)'

[3.10.10.l]
logic = 'KTemporalModalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = 'ðŸ„¿p âŠƒ â“…p'

[3.10.10.m]
logic = 'KTemporalModalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = '(p âˆ§ ðŸ„¿p) âŠƒ â’»ðŸ„¿p'

[3.10.10.n]
logic = 'KTemporalModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = 'â“…ðŸ„µp âŠƒ p'

[3.10.10.o]
logic = 'KTemporalModalLogic'
description = 'TIMEOUT! [EXPECTED]'
vars = 'p, q'
conclusion = 'ðŸ„¿(ðŸ„¿p âŠƒ p) âŠƒ ðŸ„¿p'

[3.10.10.p]
logic = 'KTemporalModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = 'â“…ðŸ„¿p âŠƒ ðŸ„¿â“…p'

[3.10.10.q]
logic = 'KTemporalModalLogic'
description = 'NOT PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = 'â’»ðŸ„µp âŠƒ p'

[3.10.10.r]
logic = 'KTemporalModalLogic'
description = 'PROVED! [EXPECTED]'
vars = 'p, q'
conclusion = '(â’»p âˆ§ â’»ðŸ„µÂ¬p) âŠƒ â’»(ðŸ„¿â’»p âˆ§ ðŸ„µÂ¬p)'
