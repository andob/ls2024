[exProp1]
description = 'PROVE: { P ⊃ Q, R ⊃ Q } ⊢ { (P ∨ R) ⊃ Q }'
logic = 'PropositionalLogic'
vars = 'P, Q, R'
premise1 = 'P ⊃ Q'
premise2 = 'R ⊃ Q'
conclusion = '(P ∨ R) ⊃ Q'

[exProp2]
description = 'PROVE: { P ⊃ (Q ∨ R), P & ¬R } ⊢ { Q }'
logic = 'PropositionalLogic'
vars = 'P, Q, R'
premise1 = 'P ⊃ (Q ∨ R)'
premise2 = 'P & ¬R'
conclusion = 'Q'

[exProp3]
description = 'PROVE: { P ∨ (Q & R) } ⊢ { (P ∨ Q) & (P ∨ R) }'
logic = 'PropositionalLogic'
vars = 'P, Q, R'
premise = 'P ∨ (Q & R)'
conclusion = '(P ∨ Q) & (P ∨ R)'

[exModal1]
description = 'PROVE: ⊢ₖ { ◇P ≡ ¬□¬P }'
logic = 'KModalLogic'
vars = 'P'
conclusion = '◇P ≡ ¬□¬P'

[exModal2]
description = 'PROVE: ⊢ₖ { ◇(P ∨ Q) ⊃ (◇P ∨ ◇Q) }'
logic = 'KModalLogic'
vars = 'P, Q'
conclusion = '◇(P ∨ Q) ⊃ (◇P ∨ ◇Q)'

[exModal3]
description = 'PROVE: { □(P ⊃ Q) } ⊢ₖ { ◇P ⊃ ◇Q }'
logic = 'KModalLogic'
vars = 'P, Q'
premise = '□(P ⊃ Q)'
conclusion = '◇P ⊃ ◇Q'

[exModal4]
description = 'PROVE: { □(◇P & ◇Q) } ⊢ₖ { □◇Q }'
logic = 'KModalLogic'
vars = 'P, Q'
premise = '□(◇P & ◇Q)'
conclusion = '□◇Q'

[exModal5]
description = 'PROVE: ⊢ᵦ { (□P ∨ □Q) ≡ □(□P ∨ □Q) }'
logic = 'BModalLogic'
vars = 'P, Q'
conclusion = '(□P ∨ □Q) ≡ □(□P ∨ □Q)'

[exModal6]
description = 'PROVE: ⊢ₛ₅ { ◇P ⊃ ◇◇P }'
logic = 'S5ModalLogic'
vars = 'P'
conclusion = '◇P ⊃ ◇◇P'

[exModal7]
description = 'PROVE: { ⊢ₛ₅ ◇P ⊃ □◇P }'
logic = 'S5ModalLogic'
vars = 'P'
conclusion = '◇P ⊃ □◇P'

[exModal8]
description = 'PROVE: ⊢ₛ₅ { □(□P ⊃ □Q) ∨ □(□Q ⊃ □P) }'
logic = 'S5ModalLogic'
vars = 'P, Q'
conclusion = '□(□P ⊃ □Q) ∨ □(□Q ⊃ □P)'

[exModal9]
description = 'PROVE: { ⊢ₛ₅ □(◇P ⊃ Q) ≡ □(P ⊃ □Q) }'
logic = 'S5ModalLogic'
vars = 'P, Q'
conclusion = '□(◇P ⊃ Q) ≡ □(P ⊃ □Q)'
